package Main;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import DAO.QuizDAO;
import DAO.QuizResultDAO;
import DTO.QuizDTO;
import DTO.QuizResultDTO;

public class OXGame extends JFrame {
	boolean myChoice;
	int answerSum;
	boolean result;
	
	QuizDAO dao = new QuizDAO();
	QuizResultDAO dao_qr = new QuizResultDAO();

	public OXGame() {
		QuizDTO dto = dao.getRandomData();
		result = dto.isAnswer();
	    myChoice = true;
	    answerSum = 0;
	    int nextId_qr = dao_qr.getNextId();

	    Container contentPane = getContentPane();
	    contentPane.setLayout(new BorderLayout());

	    // North Panel
	    JPanel northPanel = new JPanel();
	    JLabel title = new JLabel("「OXクイズ」アプリ：CRUD");
	    title.setFont(new Font("Meiryo", Font.BOLD, 28));
	    northPanel.add(title);
	    contentPane.add(northPanel, BorderLayout.NORTH);

	    // Center Panel
	    JPanel centerPanel = new JPanel(new BorderLayout());

	    JPanel centerPanelNorth = new JPanel(new GridLayout(3, 1, 0, 10));
	    JLabel centerTitle = new JLabel("ゲームの結果は？？？？");
	    centerTitle.setFont(new Font("Meiryo", Font.PLAIN, 20));
	    centerTitle.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding
	    JLabel quizTitle = new JLabel("クイズの内容");
	    quizTitle.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding
	    JLabel quizContent = new JLabel(dto.getQuestion());
	    quizContent.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding
	    centerPanelNorth.add(centerTitle);
	    centerPanelNorth.add(quizTitle);
	    centerPanelNorth.add(quizContent);

	    JPanel centerPanelCenter = new JPanel(new GridLayout(2, 3, 20, 20));
	    JLabel answerTitle = new JLabel("クイズの解答");
	    answerTitle.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding
	    JButton answerO = new JButton("O");
	    JButton answerX = new JButton("X");
	    JLabel makingPerson = new JLabel("クイズの作成者");
	    makingPerson.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding
	    JLabel makingPersonWho = new JLabel(dto.getAuthor());
	    makingPersonWho.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding

	    centerPanelCenter.add(answerTitle);
	    centerPanelCenter.add(answerO);
	    centerPanelCenter.add(answerX);
	    centerPanelCenter.add(makingPerson);
	    centerPanelCenter.add(makingPersonWho);
	    centerPanel.add(centerPanelNorth, BorderLayout.NORTH);
	    centerPanel.add(centerPanelCenter, BorderLayout.CENTER);

	    // South Panel
	    JPanel southPanel = new JPanel(new BorderLayout());

	    JPanel southSubPanel = new JPanel(new GridLayout(2, 6, 20, 10));
	    JLabel register = new JLabel("[ 登録クイズ一覧：プレイ ]");
	    register.setFont(new Font("Meiryo", Font.PLAIN, 16));

	    int quizCount = dao.getQuizCount();
	    JLabel registerNotice = new JLabel(quizCount <= 0 ? "登録されているクイズはありません。" : "OXゲームを楽しんでください　^_^!!! ");
	    registerNotice.setFont(new Font("Meiryo", Font.PLAIN, 14));

	    JLabel id = new JLabel(Integer.toString(nextId_qr));
	    JLabel kaitou = new JLabel("0");
	    JTextField sakuseisha = new JTextField(3);
	    JButton sousin = new JButton("送信");
	    JButton tsuika = new JButton("追加");
	    JButton hensyu = new JButton("編集");
	    JButton ranking = new JButton("順位");

	    southSubPanel.add(new JLabel("ID"));
	    southSubPanel.add(new JLabel("解答"));
	    southSubPanel.add(new JLabel("作成者"));
	    southSubPanel.add(new JLabel("結果を送信"));
	    southSubPanel.add(new JLabel("クイズ追加"));
	    southSubPanel.add(new JLabel("クイズ編集"));
	    southSubPanel.add(new JLabel("順位"));

	    southSubPanel.add(id);
	    southSubPanel.add(kaitou);
	    southSubPanel.add(sakuseisha);
	    southSubPanel.add(sousin);
	    southSubPanel.add(tsuika);
	    southSubPanel.add(hensyu);
	    southSubPanel.add(ranking);

	    southPanel.add(register, BorderLayout.NORTH);
	    southPanel.add(southSubPanel, BorderLayout.CENTER);
	    southPanel.add(registerNotice, BorderLayout.SOUTH);

	    // Put components into contentPane using BorderLayout
	    contentPane.add(northPanel, BorderLayout.NORTH);
	    contentPane.add(centerPanel, BorderLayout.CENTER);
	    contentPane.add(southPanel, BorderLayout.SOUTH);

		answerO.addMouseListener(

				new MouseAdapter() {
					public void mouseClicked(MouseEvent e) {
						myChoice = true;
						if (myChoice != result) {
							QuizDTO newDto = new QuizDTO();
							while (true) {
								newDto = dao.getRandomData();
								if (newDto.getQuestion() == null) {
									continue;
								} else {
									break;
								}
							}
							//System.out.println(newDto.getId() + ":" + newDto.getQuestion());
							quizContent.setText(newDto.getQuestion());
							result = newDto.isAnswer();
							makingPersonWho.setText(newDto.getAuthor());
							centerTitle.setText("You are Wrong!");
						} else {
							answerSum++;
							kaitou.setText(Integer.toString(answerSum));
							QuizDTO newDto = new QuizDTO();

							while (true) {
								newDto = dao.getRandomData();
								if (newDto.getQuestion() == null) {
									continue;
								} else {
									break;
								}
							}
							//System.out.println(newDto.getId() + ":" + newDto.getQuestion());
							quizContent.setText(newDto.getQuestion());
							result = newDto.isAnswer();
							makingPersonWho.setText(newDto.getAuthor());

							centerTitle.setText("You are Right!");
						}
					}
				});

		answerX.addMouseListener(
				new MouseAdapter() {
					public void mouseClicked(MouseEvent e) {
						myChoice = false;
						if (myChoice != result) {
							QuizDTO newDto = new QuizDTO();
							while (true) {
								newDto = dao.getRandomData();
								if (newDto.getQuestion() == null) {
									continue;
								} else {
									break;
								}
							}
							//System.out.println(newDto.getId() + ":" + newDto.getQuestion());
							quizContent.setText(newDto.getQuestion());
							result = newDto.isAnswer();
							makingPersonWho.setText(newDto.getAuthor());
							centerTitle.setText("You are Wrong!");
						} else {
							answerSum++;
							kaitou.setText(Integer.toString(answerSum));
							QuizDTO newDto = new QuizDTO();
							while (true) {
								newDto = dao.getRandomData();
								if (newDto.getQuestion() == null) {
									continue;
								} else {
									break;
								}
							}
							//System.out.println(newDto.getId() + ":" + newDto.getQuestion());
							quizContent.setText(newDto.getQuestion());
							result = newDto.isAnswer();
							makingPersonWho.setText(newDto.getAuthor());
							centerTitle.setText("You are Right!");
						}
					}
				});

		sousin.addMouseListener(
				new MouseAdapter() {
					public void mouseClicked(MouseEvent e) {
						String qr_author = sakuseisha.getText();

						if (qr_author.equals("") || qr_author == null) {
							qr_author = "anonymousPlayer" + nextId_qr;
						}

						int qr_gameResult = Integer.parseInt(kaitou.getText());

						QuizResultDTO quizResult = new QuizResultDTO();
						quizResult.setAuthor(qr_author);
						quizResult.setId(nextId_qr);
						quizResult.setGameResult(qr_gameResult);

						int result = dao_qr.addQuizResult(quizResult);
						if (result == 1) {
							System.out.println("quizresult input success");
						} else {
							System.out.println("quizresult input failed");
						}
					}
				});

		

		tsuika.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JFrame newFrame = new JFrame("Add Quiz");
				newFrame.setVisible(true);
				newFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

				newFrame.setSize(430, 200);
				JLabel label = new JLabel("新しい問題を入力してください。");
				label.setHorizontalAlignment(SwingConstants.CENTER);

				JPanel input = new JPanel(new GridLayout(3, 2, 10, 10));
				JTextField authorInput = new JTextField(4);
				JTextField questionInput = new JTextField(4);
				final String[] answer = { "" };

				// 라디오 버튼 생성
				JRadioButton radioButton1 = new JRadioButton("YES");
				JRadioButton radioButton2 = new JRadioButton("NO");

				// 라디오 버튼 그룹 생성
				ButtonGroup buttonGroup = new ButtonGroup();
				buttonGroup.add(radioButton1);
				buttonGroup.add(radioButton2);
				JPanel answerInput = new JPanel();

				answerInput.add(radioButton1);
				answerInput.add(radioButton2);

				ActionListener radioListener = event -> {
					JRadioButton source = (JRadioButton) event.getSource();
					answer[0] = source.getText();
					System.out.println("answer :: " + answer);
				};

				radioButton1.addActionListener(radioListener);
				radioButton2.addActionListener(radioListener);

				input.add(new JLabel("Author"));
				input.add(authorInput);
				input.add(new JLabel("Question"));
				input.add(questionInput);
				input.add(new JLabel("Answer"));
				input.add(answerInput);

				JButton newQbtn = new JButton("新問題送信");
				newQbtn.setHorizontalAlignment(SwingConstants.CENTER);

				newFrame.add(label, BorderLayout.NORTH);
				newFrame.add(input, BorderLayout.CENTER);
				newFrame.add(newQbtn, BorderLayout.SOUTH);

				newQbtn.addMouseListener(new MouseAdapter() {
					public void mouseClicked(MouseEvent e) {
						String question = questionInput.getText();
						String author = authorInput.getText();

						// dao.newQuestionInput 메서드를 ActionListener 내부에서 호출
						int result = dao.newQuestionInput(question, author, answer[0]);
						if (result == 1) {
							System.out.println("input success.");
						} else {
							System.out.println("input failed.");
						}
					}
				});
			}
		});
		
		hensyu.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        JFrame newFrame = new JFrame("Edit");
		        newFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		        newFrame.setSize(600, 600);

		        JPanel mainPanel = new JPanel();
		        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));

		        List<QuizDTO> listQuiz = dao.getAllQuizzes();

		        for (int i = 0; i < listQuiz.size(); i++) {
		            QuizDTO quiz = listQuiz.get(i);
		            JPanel quizPanel = createQuizPanel(quiz);

		            mainPanel.add(quizPanel);

		            // Add separator after each row, except for the last row
		            if (i < listQuiz.size() - 1) {
		                JSeparator separator = new JSeparator(JSeparator.HORIZONTAL);
		                separator.setMaximumSize(new Dimension(Integer.MAX_VALUE, 1));
		                mainPanel.add(separator);
		            }
		        }

		        JScrollPane scrollPane = new JScrollPane(mainPanel);
		        newFrame.add(scrollPane);
		        newFrame.setVisible(true);
		    }
		});

		ranking.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        List<QuizResultDTO> quizResults = dao_qr.getAllQuizResults();

		        JFrame rankingFrame = new JFrame("Ranking");
		        rankingFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		        rankingFrame.setSize(500, 400);

		        String[] columnNames = {"ID", "Author", "Game Result"};
		        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

		        for (QuizResultDTO quizResult : quizResults) {
		            Object[] rowData = {quizResult.getId(), quizResult.getAuthor(), quizResult.getGameResult()};
		            model.addRow(rowData);
		        }

		        JTable table = new JTable(model);
		        table.setFillsViewportHeight(true);
		        JScrollPane scrollPane = new JScrollPane(table);

		        rankingFrame.add(scrollPane);
		        rankingFrame.setVisible(true);
		    }
		});
		
		setTitle("OXクイズアプリ：CRUD");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(850, 450);
        setLocationRelativeTo(null); // Center the window on the screen
        setResizable(false);
        setVisible(true);
	}
	
	
	   

	public JPanel createQuizPanel(QuizDTO quiz) {
	    JPanel panel = new JPanel();
	    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
	    panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

	    JPanel infoPanel = new JPanel();
	    infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));

	    JLabel idLabel = new JLabel("ID: " + quiz.getId());
	    JLabel authorLabel = new JLabel("Author: " + quiz.getAuthor());

	    JTextArea questionArea = new JTextArea(quiz.getQuestion());
	    questionArea.setWrapStyleWord(true);
	    questionArea.setLineWrap(true);
	    questionArea.setOpaque(false);
	    questionArea.setEditable(false);

	    JButton delBtn = new JButton("削除");
	    JButton modiBtn = new JButton("修正");

	    // 삭제 버튼
	    delBtn.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	            int result = dao.deleteQuiz(quiz.getId());

	            if (result == 0) {
	                System.out.println("Delete Failed....");
	            } else if (result >= 1) {
	                System.out.println("Delete success.....");
	                // 삭제된 데이터를 표시하지 않도록 처리
	                panel.setVisible(false);
	                panel.removeAll();  // 컴포넌트 제거
	            }
	        }
	    });

	    // 수정 버튼
		modiBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int modId = quiz.getId();
				
				System.out.println("Modify button clicked for quiz with ID: " + modId);
	
				JFrame newFrame = new JFrame("Modify Question");
				newFrame.setVisible(true);
				newFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				newFrame.setSize(500, 150);
				JPanel modNorthPanel = new JPanel();
				JPanel modSouthPanel = new JPanel(new BorderLayout());
				
				JPanel idPanel = new JPanel(new FlowLayout());
				JLabel id1 = new JLabel("ID");
				JLabel id2 = new JLabel(Integer.toString(modId));
				idPanel.add(id1);
				idPanel.add(id2);
				modNorthPanel.add(idPanel, BorderLayout.NORTH);
				
				JPanel quizPanel = new JPanel(new FlowLayout());
				JLabel quiz1 = new JLabel("New Quiz");
				JTextField quiz2 = new JTextField("Previous : " + quiz.getQuestion());
				quizPanel.add(quiz1);
				quizPanel.add(quiz2);
				modNorthPanel.add(quizPanel, BorderLayout.CENTER);
				
				JPanel answerPanel = new JPanel(new FlowLayout());
				JRadioButton radioButton1 = new JRadioButton("YES");
				JRadioButton radioButton2 = new JRadioButton("NO");
				ButtonGroup buttonGroup = new ButtonGroup();
				final String[] answer = { "" };
				buttonGroup.add(radioButton1);
				buttonGroup.add(radioButton2);
				answerPanel.add(radioButton1);
				answerPanel.add(radioButton2);
				
				ActionListener radioListener = event -> {
					JRadioButton source = (JRadioButton) event.getSource();
					answer[0] = source.getText();
					System.out.println("answer :: " + answer);
				};
				
				radioButton1.addActionListener(radioListener);
				radioButton2.addActionListener(radioListener);
				
				modNorthPanel.add(answerPanel, BorderLayout.SOUTH);
				newFrame.add(modNorthPanel, BorderLayout.NORTH);
				
				JPanel modWriter = new JPanel(new FlowLayout());
				JLabel modWriter1 = new JLabel("Author");
				JTextField modWriter2 = new JTextField("Anonymous" + modId);
				modWriter.add(modWriter1);
				modWriter.add(modWriter2);
				
				JButton modSubmitBtn = new JButton("Quiz Modify");
				modSouthPanel.add(modWriter, BorderLayout.NORTH);
				modSouthPanel.add(modSubmitBtn, BorderLayout.SOUTH);
				newFrame.add(modSouthPanel, BorderLayout.SOUTH);
				
				modSubmitBtn.addActionListener(new ActionListener() {
		            @Override
		            public void actionPerformed(ActionEvent e) {
		                QuizDTO modifiedDto = new QuizDTO();
		                modifiedDto.setId(modId);
		                modifiedDto.setQuestion((String) quiz2.getText());
		                modifiedDto.setAuthor((String) modWriter2.getText());
		                boolean modBool;
		                if (answer[0] != null & answer[0].equals("YES")) {
		                    modBool = true;
		                } else {
		                    modBool = false;
		                }
		                modifiedDto.setAnswer(modBool);
	
		                int result = dao.updateQuiz(modifiedDto);
	
		                if (result == 0) {
		                    System.out.println("Modify Failed....");
		                } else if (result >= 1) {
		                    System.out.println("Modify success.....");
		                    // 수정된 내용으로 UI 업데이트
		                    
		                }
		            }
		        });
			}
		});


	    infoPanel.add(idLabel);
	    infoPanel.add(authorLabel);
	    infoPanel.add(Box.createVerticalStrut(10));
	    infoPanel.add(questionArea);

	    panel.add(infoPanel);
	    panel.add(Box.createHorizontalGlue());
	    panel.add(delBtn);
	    panel.add(modiBtn);

	    return panel;
	}
}
